[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "yaaml"
version = "0.1.0"
authors = [{ name = "Varun Rajan", email = "varun@example.com" }]
description = "Yet Another AutoML - A native Python AutoML library"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "automl",
    "machine learning",
    "sklearn",
    "automated machine learning",
]
dependencies = ["numpy>=2.0.0", "pandas>=2.0.0", "scikit-learn>=1.5.0"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.17.0",
    "types-requests>=2.32.0",
    "pandas-stubs>=2.3.0",
    "types-setuptools>=80.0.0",
    "pre-commit>=2.20.0",
    "build>=1.2.0",
    "twine>=6.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinxcontrib-napoleon>=0.7",
]

[project.urls]
Homepage = "https://github.com/JordanRex/yaaml"
Repository = "https://github.com/JordanRex/yaaml"
Documentation = "https://yaaml.readthedocs.io"
"Bug Tracker" = "https://github.com/JordanRex/yaaml/issues"

[project.scripts]
yaaml = "yaaml.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["yaaml*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-v",
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=yaaml",
    "--cov-report=term-missing",
    "--cov-report=html:coverage/htmlcov",
    "--cov-report=xml:coverage/coverage.xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["yaaml"]
data_file = "coverage/.coverage"
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "setup_dev.py",
    "run_tests.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py312', 'py313']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["yaaml"]
skip_glob = ["*/.venv/*", "*/.env/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = ["__init__.py:F401,F403", "tests/*:D100,D101,D102,D103,D104"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Exclude irrelevant directories (use glob patterns)
exclude = [
    "^build/.*",
    "^dist/.*",
    "^venv/.*",
    "^\\.venv/.*",
    "^env/.*",
    "^\\.env/.*",
    "^coverage/.*",
    "^\\.coverage.*",
    "^\\.mypy_cache/.*",
    "^\\.pytest_cache/.*",
]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
