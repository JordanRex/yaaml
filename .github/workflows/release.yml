name: Release

on:
  push:
    tags:
      - "v*"
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Deploy to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write

env:
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  # Build and test
  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Create and sync environment
      run: uv sync --extra dev

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Run tests
      run: uv run pytest

    - name: Build package
      run: uv build

    - name: Validate package
      run: |
        echo "📦 Built distributions:"
        ls -la dist/
        # Basic validation - ensure files exist
        if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
          echo "❌ Missing distribution files"
          exit 1
        fi
        echo "✅ Package validation passed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  # Publish to Test PyPI (for testing)
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_pypi == 'true' || contains(github.ref, 'test')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to Test PyPI
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: uv publish --publish-url https://test.pypi.org/legacy/

  # Publish to PyPI (production)
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') && github.event.inputs.test_pypi != 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: uv publish

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Extract version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        echo "# YAAML v${{ steps.version.outputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "## What's New" >> release_notes.md
        echo "- Modern AutoML package with comprehensive preprocessing" >> release_notes.md
        echo "- Built with uv for fast dependency management" >> release_notes.md
        echo "- Comprehensive test coverage and code quality checks" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "pip install yaaml==${{ steps.version.outputs.version }}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Files" >> release_notes.md
        echo "Built for Python 3.12+ on Linux, macOS, and Windows." >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: YAAML v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: false
