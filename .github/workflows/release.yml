name: Release

on:
  push:
    tags:
      - "v*"
  # Manual trigger for testing releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      test_only:
        description: 'Test PyPI only (uncheck for production PyPI)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  id-token: write

env:
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  # Build and test
  build:
    name: Build Package
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create and sync environment
      run: uv sync --extra dev

    # Create tag for manual releases (only run once)
    - name: Create and push tag (manual releases only)
      if: github.event_name == 'workflow_dispatch' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      run: |
        VERSION="v${{ github.event.inputs.version }}"
        echo "Creating tag: $VERSION"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Check if tag already exists
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "⚠️  Tag $VERSION already exists!"
          echo "Available options:"
          echo "1. Use a different version number"
          echo "2. Delete the existing tag first: git push --delete origin $VERSION"
          exit 1
        fi

        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
        echo "✅ Created and pushed tag: $VERSION"

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
          uv-${{ runner.os }}-

    - name: Run tests
      run: uv run pytest

    - name: Build package
      run: uv build

    - name: Validate package
      run: |
        echo "📦 Built distributions on ${{ matrix.os }} with Python ${{ matrix.python-version }}:"
        ls -la dist/
        # Basic validation - ensure files exist
        if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
          echo "❌ Missing distribution files"
          exit 1
        fi
        echo "✅ Package validation passed"
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/
        retention-days: 30

  # Collect all build artifacts
  collect-artifacts:
    name: Collect Build Artifacts
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Organize distributions
      run: |
        mkdir -p dist
        echo "📦 Collecting all distributions:"
        find all-artifacts -name "*.whl" -o -name "*.tar.gz" | while read file; do
          echo "Found: $file"
          cp "$file" dist/
        done

        echo "📋 Final distribution list:"
        ls -la dist/

        echo "🔍 Wheel details:"
        ls dist/*.whl | while read wheel; do
          echo "📄 $(basename "$wheel")"
        done

    - name: Upload consolidated artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  # Publish to Test PyPI (for testing)
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: collect-artifacts
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.test_only == 'true') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v0.'))

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to Test PyPI
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "🧪 Publishing to Test PyPI..."
        echo "Version: $(ls dist/*.whl | head -1 | sed 's/.*-\([0-9.]*\)-.*/\1/')"

        if [ -z "$UV_PUBLISH_TOKEN" ]; then
          echo "⚠️  TEST_PYPI_API_TOKEN secret not found!"
          echo "📋 To enable Test PyPI publishing:"
          echo "   1. Go to test.pypi.org and create an API token"
          echo "   2. Add it as TEST_PYPI_API_TOKEN secret in GitHub repo settings"
          echo "   3. Re-run this workflow"
          echo ""
          echo "🎉 Package is built and ready - check the artifacts!"
          exit 0
        fi

        uv publish --publish-url https://test.pypi.org/legacy/

  # Publish to PyPI (production)
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: collect-artifacts
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/tags/v0.')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.test_only != 'true')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI (production)..."
        echo "Version: $(ls dist/*.whl | head -1 | sed 's/.*-\([0-9.]*\)-.*/\1/')"

        if [ -z "$UV_PUBLISH_TOKEN" ]; then
          echo "⚠️  PYPI_API_TOKEN secret not found!"
          echo "📋 To enable PyPI publishing:"
          echo "   1. Go to PyPI.org and create an API token"
          echo "   2. Add it as PYPI_API_TOKEN secret in GitHub repo settings"
          echo "   3. Re-run this workflow"
          echo ""
          echo "🎉 Package is built and ready - check the artifacts!"
          exit 0
        fi

        uv publish

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [collect-artifacts]
    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # For manual releases, ensure we have the latest tags
    - name: Fetch latest tags
      if: github.event_name == 'workflow_dispatch'
      run: |
        git fetch --tags --force
        echo "Available tags:"
        git tag --list 'v*' --sort=-version:refname | head -5

    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Extract version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ "$VERSION" == 0.* ]]; then
          RELEASE_TYPE="🧪 **Test Release**"
          INSTALL_NOTE="⚠️ This is a test release. Install from Test PyPI:"
          INSTALL_CMD="pip install -i https://test.pypi.org/simple/ yaaml==$VERSION"
        else
          RELEASE_TYPE="🚀 **Production Release**"
          INSTALL_NOTE="📦 Install from PyPI:"
          INSTALL_CMD="pip install yaaml==$VERSION"
        fi

        echo "# YAAML v$VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "$RELEASE_TYPE" >> release_notes.md
        echo "" >> release_notes.md
        echo "## What's New" >> release_notes.md
        echo "- Modern AutoML package with comprehensive preprocessing" >> release_notes.md
        echo "- Built with uv for fast dependency management" >> release_notes.md
        echo "- Comprehensive test coverage and code quality checks" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "$INSTALL_NOTE" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "$INSTALL_CMD" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Files" >> release_notes.md
        echo "📦 **Multi-platform wheels available:**" >> release_notes.md
        echo "- Python 3.12 & 3.13 support" >> release_notes.md
        echo "- Linux (x86_64), macOS (Intel & Apple Silicon), Windows (x64)" >> release_notes.md
        echo "- Universal source distribution included" >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: YAAML v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: false
