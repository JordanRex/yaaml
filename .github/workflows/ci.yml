name: CI

# Trigger on pushes to main/master and pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # Manual trigger for testing
  workflow_dispatch:

env:
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Create and sync environment
      run: uv sync --extra dev

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Run pre-commit hooks
      run: uv run pre-commit run --all-files

  # Unit tests across Python versions
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create and sync environment
      run: uv sync --extra dev

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-py${{ matrix.python-version }}-
          uv-${{ runner.os }}-

    - name: Run unit tests
      run: |
        mkdir -p coverage
        uv run pytest

    - name: Store coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.12'
      with:
        name: coverage-reports
        path: coverage/
        retention-days: 7

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Create and sync environment
      run: uv sync --extra dev

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-integration-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Run integration tests
      run: |
        echo "üß™ Running Integration Tests"
        uv run pytest tests/test_module_integration.py -v
        uv run pytest tests/test_realistic_automl.py -v

    - name: Test package import
      run: |
        uv run python -c "
        import yaaml
        from yaaml import YAAMLAutoML
        print(f'‚úÖ YAAML version: {yaaml.__version__}')
        print('‚úÖ Package import successful')
        "

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Create and sync environment
      run: uv sync --extra dev

    - name: Run Bandit security scan
      run: uv run bandit -r yaaml/ -f json -o security-report.json
      continue-on-error: true

    - name: Run Safety dependency scan
      run: uv run safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: "*-report.json"
        retention-days: 30

  # Build package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, integration]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Create and sync environment
      run: uv sync --extra dev

    - name: Build package
      run: uv build

    - name: Validate package
      run: |
        echo "üì¶ Built distributions:"
        ls -la dist/
        # Basic validation - ensure files exist
        if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
          echo "‚ùå Missing distribution files"
          exit 1
        fi
        echo "‚úÖ Package validation passed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 7

    - name: Test package installation
      run: |
        # Test installing from built package
        uv pip install dist/*.whl
        uv run python -c "import yaaml; print(f'Built package version: {yaaml.__version__}')"
